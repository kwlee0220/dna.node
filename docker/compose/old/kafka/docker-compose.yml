version: "3.0"
services:
  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    ports:
      - 8080:8080
    depends_on:
      - zookeeper
      - kafka01
      - kafka02
      - kafka03
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: "kafka01:19091,kafka02:19092,kafka03:19093"
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
      KAFKA_CLUSTERS_0_SCHEMAREGISTRY: http://schema-registry:8081
      KAFKA_CLUSTERS_0_KAFKACONNECT_0_NAME: first
      KAFKA_CLUSTERS_0_KAFKACONNECT_0_ADDRESS: http://connect-fs:8083
      LOGGING_LEVEL_ROOT: warn
    networks:
      - dna_server_net
    restart: on-failure

  zookeeper:
    image: confluentinc/cp-zookeeper:7.1.2
    container_name: zookeeper
    environment:
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_SERVERS: "zookeeper:22888:23888"
      ZOOKEEPER_LOG4J_ROOT_LOGLEVEL: warn
    ports:
      - 2181:2181
    volumes:
      - ./data/zookeeper/data:/data
      - ./data/zookeeper/datalog:/datalogco
      - ./data/zookeeper/varlib/data:/var/lib/zookeeper/data
      - ./data/zookeeper/varlib/log:/var/lib/zookeeper/log
    networks:
      - dna_server_net
    restart: always

  kafka01:
    image: confluentinc/cp-kafka:7.1.2
    container_name: kafka01
    ports:
      - 9091:9091
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka01:19091,PLAINTEXT_HOST://localhost:9091
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_DELETE_TOPIC_ENABLE: true
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
    volumes:
      - ./data/kafka01/kafka-logs:/tmp/kafka-logs
      - ./data/kafka01/data:/var/lib/kafka/data
    networks:
      - dna_server_net
    depends_on:
      - zookeeper
    restart: always

  kafka02:
    image: confluentinc/cp-kafka:7.1.2
    container_name: kafka02
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka02:19092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_DELETE_TOPIC_ENABLE: true
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
    volumes:
      - ./data/kafka02/kafka-logs:/tmp/kafka-logs
      - ./data/kafka02/data:/var/lib/kafka/data
    networks:
      - dna_server_net
    depends_on:
      - zookeeper
    restart: always

  kafka03:
    image: confluentinc/cp-kafka:7.1.2
    container_name: kafka03
    ports:
      - "9093:9093"
    environment:
      KAFKA_BROKER_ID: 3
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka03:19093,PLAINTEXT_HOST://localhost:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_DELETE_TOPIC_ENABLE: true
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
    volumes:
      - ./data/kafka03/kafka-logs:/tmp/kafka-logs
      - ./data/kafka03/data:/var/lib/kafka/data
    networks:
      - dna_server_net
    depends_on:
      - zookeeper
    restart: always

networks:
  dna_server_net:
    external: true
    internal: true
      
  # schema-registry:
    # image: confluentinc/cp-schema-registry:7.1.2
    # container_name: schema-registry
    # environment:
      # SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: "kafka01:19091,kafka02:19092,kafka03:19093"
      # SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: "zookeeper:2181"
      # SCHEMA_REGISTRY_HOST_NAME: schema-registry
      # SCHEMA_REGISTRY_LISTENERS: "http://0.0.0.0:8081"
    # ports:
      # - 8081:8081
    # depends_on:
      # - zookeeper
      # - kafka01
      # - kafka02
      # - kafka03

  # connect-fs:
    # image: mmolimar/kafka-connect-fs:1.3.0
    # container_name: connect
    # depends_on:
      # - kafka01
      # - kafka02
      # - kafka03
      # - schema-registry
    # ports:
      # - "8083:8083"
      # - "8000:8000"
    # environment:
      # CONNECT_BOOTSTRAP_SERVERS: "kafka01:19091,kafka02:19092,kafka03:19093"
      # CONNECT_REST_ADVERTISED_HOST_NAME: connect
      # CONNECT_REST_PORT: 8083
      # CONNECT_GROUP_ID: compose-connect-group
      # CONNECT_CONFIG_STORAGE_TOPIC: _connect_configs
      # CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      # CONNECT_OFFSET_FLUSH_INTERVAL_MS: 10000
      # CONNECT_OFFSET_STORAGE_TOPIC: _connect_offset
      # CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      # CONNECT_STATUS_STORAGE_TOPIC: _connect_status
      # CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      # CONNECT_KEY_CONVERTER: org.apache.kafka.connect.storage.StringConverter
      # CONNECT_VALUE_CONVERTER: org.apache.kafka.connect.storage.StringConverter
# #     CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      # CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      # CONNECT_INTERNAL_KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      # CONNECT_INTERNAL_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      # CONNECT_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      # CONNECT_PLUGIN_PATH: "data/kafka-connect/plugins" 
      # CONNECT_LOG4J_ROOT_LOGLEVEL: "INFO"
      # CONNECT_LOG4J_LOGGERS: org.apache.zookeeper=ERROR,org.I0Itec.zkclient=ERROR,org.reflections=ERROR
      # KAFKA_OPTS: "-agentlib:jdwp=transport=dt_socket,server=y,address=8000,suspend=n"
